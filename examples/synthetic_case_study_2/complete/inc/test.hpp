// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef TEST_HH
#define TEST_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"
#include "spec0.hpp"
#include "spec1.hpp"
#include "spec2.hpp"

class test
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_3_old;
    bool a_3_old;
    bool b_2_old;
    bool a_2_old;
    bool b_1_old;
    bool a_1_old;
    bool clock_old;
    struct test_iostruct{
        bool clock;
        bool a_1;
        bool b_1;
        bool a_2;
        bool b_2;
        bool a_3;
        bool b_3;
        bool c_1;
        bool c_2;
        bool c_3;

        test_iostruct():
            clock(false),
            a_1(false),
            b_1(false),
            a_2(false),
            b_2(false),
            a_3(false),
            b_3(false),
            c_1(false),
            c_2(false),
            c_3(false)
        {}

        test_iostruct( const bool clock_3, const bool a_1_1, const bool b_1_1, const
             bool a_2_1, const bool b_2_1, const bool a_3_1, const bool b_3_1, const
             bool c_1_1, const bool c_2_1, const bool c_3_1 ):
            clock(clock_3),
            a_1(a_1_1),
            b_1(b_1_1),
            a_2(a_2_1),
            b_2(b_2_1),
            a_3(a_3_1),
            b_3(b_3_1),
            c_1(c_1_1),
            c_2(c_2_1),
            c_3(c_3_1)
        {}

        ~test_iostruct()
        {}

        bool operator == (const test_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_1 != other.a_1) return false;
            if (b_1 != other.b_1) return false;
            if (a_2 != other.a_2) return false;
            if (b_2 != other.b_2) return false;
            if (a_3 != other.a_3) return false;
            if (b_3 != other.b_3) return false;
            if (c_1 != other.c_1) return false;
            if (c_2 != other.c_2) return false;
            if (c_3 != other.c_3) return false;
            return true;
        }
    };
    test_iostruct hif_a2t_data;
    test();


    ~test();


    spec0 spec_sbm0;
    spec1 spec_sbm1;
    spec2 spec_sbm2;
    bool process_in_queue;

    bool perform_bindings();

    bool _bindings_completed;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void synch_elaboration();


    void simulate( test_iostruct * io_exchange, int32_t & cycles_number );


    void start_of_simulation();


    void initialize();


    void finalize();


private:

    test( const test & );
    const test& operator= ( const test & );


};


#endif

