// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC0_HH
#define SPEC0_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec0
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_1_old;
    bool a_1_old;
    bool clock_old;
    struct spec0_iostruct{
        bool * clock;
        bool * a_1;
        bool * b_1;
        bool * c_1;

        spec0_iostruct():
            clock(nullptr),
            a_1(nullptr),
            b_1(nullptr),
            c_1(nullptr)
        {}

        spec0_iostruct( bool * clock_0, bool * a_1_0, bool * b_1_0, bool * c_1_0
             ):
            clock(clock_0),
            a_1(a_1_0),
            b_1(b_1_0),
            c_1(c_1_0)
        {}

        ~spec0_iostruct()
        {}

        bool operator == (const spec0_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_1 != other.a_1) return false;
            if (b_1 != other.b_1) return false;
            if (c_1 != other.c_1) return false;
            return true;
        }
    };
    spec0_iostruct hif_a2t_data;
    bool _00_;
    bool _01_;
    bool _02_;
    bool _03_;
    bool _04_;
    bool _05_;
    bool _06_;
    bool _07_;
    bool _08_;
    bool _09_;
    bool _10_;
    bool _11_;
    bool _12_;
    bool _13_;
    bool _14_;
    bool _15_;
    bool _16_;
    bool _17_;
    bool _18_;
    bool _19_;
    bool _20_;
    bool _21_;
    bool _22_;
    bool _23_;
    bool _24_;
    bool _25_;
    bool _26_;
    bool _27_;
    bool _28_;
    bool _29_;
    bool _30_;
    bool _31_;
    bool _32_;
    bool _33_;
    bool _34_;
    bool _35_;
    bool _36_;
    bool _37_;

    void hif_cone__24__0();


    void hif_cone__29__0();

    spec0();


    ~spec0();


    bool _37__new;
    bool process_in_queue;
    bool flag_process_process_0_executed;
    bool flag_pos_clock;

    void process_process_0();


    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec0( const spec0 & );
    const spec0& operator= ( const spec0 & );


};


#endif

